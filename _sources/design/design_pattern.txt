.. _design_pattern:

**************************
디자인 패턴
**************************

:ref:`design_terms_디자인_패턴` 의 종류는 다음과 같다.

===================
전략 패턴
===================

**전략 패턴** 이란 클래스의 여러가지 동작을 표현하기 위해 다양한 종류의 클래스를 상속하지 않고 전략 인터페이스에만 의존하여 전략을 선택할 수 있는 디자인 기법이다. 알고리즘을 독립시키는 패턴을 뜻한다.

**전략 패턴의 특징은 코드의 중복없이 알고리즘을 재사용할 수 있다는 것이다.**

========
MVC 패턴
========

프로그램을 크게 Model, View, Controller 구성요소로 나누는 패턴이다.

- Model은 데이터를 수정하거나 어떤 동작을 수행할 수 있다.
- View는 Model에서 데이터를 읽어와서 사용자에게 보여준다. 
- Controller는 사용자의 요청을 처리하기위해 Model의 상태를 바꾼다.

이외에도 Service 계층을 두고 1개 이상의 모델과 함께 특정 작업을 처리하기도 한다.

====================================
ISP(Interface Segregation Principle)
====================================

자신의 서브 클래스 때문에 **원치 않은 상속과 사용하지 않는 메소드에** 강제로 의존하지 않아야 한다. 이는 인터페이스를 분리하고 다중 상속이나, **Adapter를 통해 분리된 인터페이스의 서브 클래스간 통신을 하게하여 해결할 수 있다.**

그 예제로 Door, Timer 문제나 Shape, TextShape, TextView 문제가 있다.

======================================
의존성 주입 패턴(Dependency injection)
======================================

**의존성 주입은** 객체에서 의존 객체 생성에 대한 관심을 분리하고 외부에서 의존성을 주입하는 패턴을 뜻한다. 의존성은 외부(사용자, 프레임워크, 라이브러리)에서 선택 및 생성되어 생성자나 setter를 통해 주입된다.

사용자가 직접 의존성을 생성할 경우 *객체 그래프(object graph)가* 필요하다. 그래프를 직접 만드는 것은 시간이 필요하며, 에러가 발생하기 쉽고, 테스팅 하기 어렵게 한다. Spring, Guice 같은 프레임워크는 이를 제공한다. 

**단순하게 생각해도 아래의 Consumer 클래스를 선언할때, 그 객체의 의존성을 생성해야하고 의존성의 의존성 객체도 생성해야한다. 사용하기 너무 불편하다. 객체의 라이프 타임도 관리가 안된다.**::

  class D{
  }

  class C{
    D d;
    public C(D d){
      this.d = d;
    }
  }

  class B{
    C c;
    public A(C c){
      this.c = c;
    }
  }

  class A{
    B b;
    public A(B b){
      this.b = b;
    }
    ...
  }

  class Consumer{
    void consume(){
      C c = new C(new D())
      B b = new B(c);
      A a = new A(b);
      a.use();
    }
  }

DI 패턴은 **아예 클래스 내부에서 객체를 생성하는 Compile-time dependency를 사용하거나, 주입할 스태틱 객체를 갖는 팩토리 클래스를 만드는** 패턴을 대체합니다.

===================
위임 패턴
===================

다른 객체에 일을 위임하는 설계 패턴을 뜻한다. 안드로이드에서 터치이벤트를 처리하기 위해 버튼의 구체적인 역할을 OnClickListener에 위임하였다.

=======================
팩토리 메서드 패턴
=======================

`팩토리 메서드 패턴 <http://www.oodesign.com/factory-method-pattern.html>`_

객체를 사용하는 측에서 사용하려는 클래스의 인터페이스만 정의하며 실제로 어떤 객체를 생성할지 구체적인 팩토리 메서드에 맡기는 패턴이다. 예를들어 워드에서 특별한 형식의 문서를 만들때 그 타입만 넘겨주면 타입에 관련된 구체적인 클래스를 반환한다.

장점

- 단지 인터페이스만 알고 있으면 되기 때문에 클래스와의 강결합을 줄여준다. 어플리케이션과 구체적인 클래스를 분리시킨다. 따라서 코드 수정이 적다.
- 팩토리 메서드를 사용하여 내부적으로 수정이 쉬우므로 객체 생성의 다양성을 제공한다.

단점 (사용하기 안좋은 경우)

- 생성하려는 클래스의 종류가 부모를 상속하는 형태가 아니라면 굳이 쓸필요가 없는 패턴이다.
- 확장이 아닌 결합도를 줄이기 위해 사용하는 패턴이다.

=======================
템플릿 메서드 패턴
=======================

부모 클래스에서 메서드 호출의 흐름을 제어하고 자식 클래스에서 구체적인 내용을 작성하는 패턴이다. 예를들어 HTML문서를 생성할때 템플릿 메서드를 활용하면 좋다. 템플릿 메서드에서 head, body 등의 필요한 태그를 생성하는 함수를 이용해 흐름을 작성한다.

장점

- 템플릿을 통해 코드의 중복을 줄인다.
- 템플릿 메서드를 이용해 리팩토링이 쉽다.

===================
옵저버 패턴
===================

다른 객체의 변화를 관찰하는 패턴이다. 콜백패턴이라고 불리기도 한다.

장점

- 객체의 변화를 감지할 수 있다.


====
참조
====

- DI Motivation: https://github.com/google/guice/wiki/Motivation
- DI: https://github.com/google/guice/wiki/GettingStarted

