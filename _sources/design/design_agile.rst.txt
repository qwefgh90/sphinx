.. _design_pattern:

**************************
애자일
**************************

=========================
기존의 방법론
=========================

기존의 프로젝트 방법론에는 여러가지 문제점이 가지고 있다.

요구사항은 수시로 변경되지만 기존 프로젝트 방법론에서 대응할 수 있는 방법은 없다. 개발자들은 공들여 만든 설계도 그대로 구현을 하지만, 얼마 가지않아 고객은 새로운 기능을 요구하고 기존의 설계가 쓸모 없어 지게된다.
그리고 이러한 요구사항 변경을 실패의 원인으로 보고 고객을 원망한다. 다음 프로젝트를 진행할 때는 실패하지 않기 전보다 더 복잡하고 엄격한 설계 문서와 프로세스를 요구한다.
그리고 추가된 문서나 프로세스 때문에 프로젝트 기간은 더 늘어지고, 도저히 일정내에 마칠 수 없게 된다.

설계문서가 지나치게 신격화되고 그것대로 만들면 프로젝트가 성공할거란 믿음이 강하기 때문이다. 이러한 방식으로는 결코 좋은 효율을 낼 수 없다.

**애자일은 이러한 프로세스나 문서에 의지하지 않으며, 요구사항 변경에 민첩하게 반응할 수 있게 하는 방법론이다.**

아래는 기본적인 애자일 아이디어이다.

- 프로세스와 툴보다 개인과 상호작용이 우선이다.
- 포괄적인 문서보다 동작하는 소프트웨어가 우선이다.
- 계약 협상보다 고객 협력이 우선이다.
- 계획을 따르는 것보다 변화에 대한 반응이 우선이다.

==================================================================
Extreme programming(익스트림 프로그래밍, XP)
==================================================================

XP는 Agile 방법 중에서 가장 유명한 실천 방법이다.

요구사항 분석단계에서 사용자 스토리로 고객 요구사항을 정리하고, 반복 계획 및 릴리스 계획을 세워 프로젝트를 진행한다.

------------------------
반복계획
------------------------

반복 계획은 2주 단위로 한번씩 스토리의 묶음을 선택하여 개발하는 것을 말한다. 반복계획을 사용하면 반복 단위로 고객이 스토리를 선택하고 우선순위를 설정할 수 있게하며,
팀의 퍼포먼스를 측정하여 프로젝트 예상 소요 기간을 측정할 수 있게 한다. 또한 2주 단위로 요구사항 변경을 받아들일 수 있다.

각 반복 계획에서는 일반적으로 **빠른 설계 회의(quick design session)를 갖게된다.** 설계의 산출물이 정해진것은 아니며, 선택된 스토리를 정확하게 분석하고 여러가지 스케치를 통해 숨어있는 추상화를 꺼내는 작업을 한다. 

분석 단계에서 사용할 수 있는 도구는 다음과 같다. **가장 중요한건 무슨일을 해야하는지 계획하는 것이다.**

- 유저 스토리
- 유즈 케이스(상세화된 스토리, 다이어그램 포함)
- 도메인 모델링
- 인수 테스트
- 인터페이스 스케치

구체적인 설계 단계에서는 **코딩을 하기 위해 필요한 것들을 함께 고민한다.** 클래스 다이어그램이나 시퀀스 다이어 그램로 모델의 밑그림을 그리고, 사용자 스토리를 여러개의 작업(Task)으로 쪼개서, TDD 방법론을 활용하여 구현을 진행한다.

- 클래스 다이어그램 (out of date)
- 시퀀스 다이어그램 (out of date)
- 테스트 코드(TDD) (up to date)
- 작업 나누기 (Tasks)
- ERD 작성 (나중에 진행해야한다. 꼭 DB가 필요한 시점에 DB설계를 시작해야 한다.)

---------------
TDD
---------------

**TDD는 기본적으로 개발자의 코드를 검증할 수 있으므로 개발자에게 가치 있는 작업이 된다. 더 중요한 것은 호출자의 관점에서 프로그램의 인터페이스에 관심을 갖게 하는 것이다.** 또한 문서화의 한 형태로 남을 수 있으며, 항상 최신의 튜토리얼이 된다. **하나의 산출물이 다양한 목적으로 사용되므로 효율적이다.** 그 외에도 강제로 주변 환경과 분리된 테스트 가능한 프로그램을 만들 수 있게 하는 효과가 있다.

구체적으로 전체적인 설계를 한 뒤 코딩하는 것은 여러가지 설계 사항이 고려되지 않고 성급하게 초점이 맞춰진 채로 진행될 가능성이 높다.

---------------------------------------
반복 계획의 가치
---------------------------------------

스토리 단위로 설계, 구현을 반복하는 것은 어떤 가치를 줄까? 이전 방식에 비해 어떤 점이 나을까? 처음부터 전체 설계를 하는 것은 몇가지 위험성을 갖고 있다. 고객은 프로젝트가 진행되는 중간에 새로운 요구사항을 전달하거나 기존의 요구사항을 변경한다. 이는 부정하고 싶어도 부정할 수 없다. 일단 요구사항이 바뀌면 전체 설계는 틀어지게 된다. **반복 계획이 적용될 경우 사용자의 변경 요구사항을 수용할 수 있을 정도로 유연하다.**

또한 반복이 진행될 수록 고객은 더 구체적이고 정확한 것을 말할 수 있게 된다. 고객은 반복에서 얻은 지식을 바탕으로 더 자세한 아이디어를 갖게 되고, 프로젝트를 이끌어 나간다. 개발자 역시 프로젝트 초반에 비해 도메인에 대한 지식이 많이 쌓이게 되므로, 더 완벽한 분석, 설계, 구현을 할 수 있다.




====
참조
====

- UseCase: https://martinfowler.com/bliki/UseCasesAndStories.html
- agile 설계: http://agilemodeling.com/essays/agileDesign.htm
- agile 분석: http://agilemodeling.com/essays/iterationModeling.htm
- 구체적인 설계: http://agilemodeling.com/essays/modelStorming.htm
- tdd: http://agiledata.org/essays/tdd.html
