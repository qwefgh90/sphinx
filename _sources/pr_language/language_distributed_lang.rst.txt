.. _distributed_lang:

====================
 분산 언어
====================

분산 시스템
================

분산 시스템은 프로그램상 작업을 여러 시스템에서 분산시켜 처리하는 시스템을 의미한다. 
일반적으로 처리 속도를 향상 시키는데 활용된다.

분산 시스템이 어려운 이유
===================================

크게 3가지 이유가 있으며, 이에 관련된 CAP 이론이 존재한다.

Patial Failure(부분 실패)
-----------------------------------------

**로컬 프로세스는** OS안에서 관리된다. 특정 프로세스가 강제 종료되더라도 OS는 모든 프로세스에 대한 정보를 알고 있으며,
IPC를 수행하는 중 장애가 발생하더라도 OS에 쿼리하여 정보를 얻을 수 있다.

하지만 **여러 컴퓨터에 분산된 프로세스는 신뢰할 수 있는 중앙 관리자가 존재할 수 없다.** 로컬 프로세스와 달리
네트워크를 활용하기 때문에 네트워크 파티셔닝으로 인해 서로간 정보가 단절될 수 있기 때문이다.
여러가지 네트워크상의 이유로 정상적인 메시지가 유실되거나 순서가 뒤바뀔 수 있으며, 실패 메시지 조차 유실될 수 있다.

이러한 부분 실패는 분산 시스템 설계시 반드시 잘 처리되어야 한다. 몇몇 방법론이 존재하는데 그중 하나는 **Dataflow model** 이다.
Dataflow 모델에서는 실패를 대비하여 **전체 계산 절차를** 기억하고 있다. 또 다른 방법은 **Two phase commit을** 사용하는 것이다.
이 방법에서는 상태 변경 직전에 관리자에게 모든 노드가 준비되었는지 물어보고, 모두 준비 되었다면 변경을 실행한다. 만약 준비되지 않았다면
어떠한 변경도 수행하지 않는다.

또 다른 방법은 **복제본(replication)을** 미리 만들어 놓고 실패시 복제본이 작업을 받아 처리하도록 하는 것이다. 또 다른 방법은
**각 상태에 대한 스냅샷(Snapshot) 또는 객체을** 잘 저장해놓고 불러와서 다시 계산을 수행하는 방법이 있다.

Consistency(일관성)
----------------------------------

로컬 환경에서 각 프로세스는 매우 빠르게 통신할 수 있으며, 결과를 빠르게 받아볼 수 있다. 비록 데이터 레이스 등 동시 처리에
여러가지 문제가 발생할 수는 있지만, Lock등 비교적 간단한 기법으로 해결할 수 있다. 

**분산 시스템의 경우 여러 시스템이 하나의 일관된 상태를 유지하기 매우 어렵다.** 신뢰할 수 있는 중앙 관리자와 부분 실패 문제로 인해
모든 시스템이 같은 상태를 유지하기 어렵다. 그래서 일관성 문제 역시 분산 시스템 설계시 반드시 다뤄져야한다.

이를 해결하기 위해 사용되는 흔히 사용되는 방법은 메시지 큐 방식이다. 각 프로세스에 큐를 할당하고 쌓인 메시지는 순차적으로 1개씩 처리된다.
이 순차적으로 처리되는 특성 덕분에 일관성이 깨질 위험이 거의 없다. **하지만, 이러한 큐 방식도 네트워크 파티셔닝 문제를 해결할 수는 없다.**

**현재는 느슨한 일관성을 유지하는 방법이 사용되고 있다.**

Latency(지연시간)
---------------------------------

네트워크 활용으로 인해 지연시간이 발생하므로 분산 시스템은 좋은 성능을 갖기 어려우며 비결정성을 띄게 된다.
그리고 특정 타이밍을 요하는 기능을 구현할 수가 없다. **또한 메시지를 받지 못했을때 실패 메시지인지 그저 메시지 전송이 느린건지 구분할 수 없다.**

지연시간으로 인한 성능 문제를 해결하기 위해 비동기 프로그래밍이 활용될 수 있다. Future나 Promise를 이용해 요청을 기다리는 동안에도 다른 작업을
하여 성능문제를 해결할 수 있다.


 



