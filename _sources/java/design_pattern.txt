.. _design_pattern:

**************************
디자인 패턴
**************************

디자인 패턴이란 개발 시 자주사용하는 설계 노하우나 코딩 테크닉을 뜻한다.

===================
UML
===================

클래스와 클래스간의 관계를 설계하는 언어이다. 화살표의 방향은 한쪽 클래스를 인식하는 방향으로 그어진다.

- \+ : public
- \- : private
- \# : protected

상속 : 한 클래스가 다른 클래스의 기능을 재사용할 수 있는 것을 뜻한다. (머리가 칠해진 화살표)
의존 : 한 클래스가 다른 클래스의 참조를 갖지만 유지하지 않는 것을 의존관계라 한다. (점선 화살표)
일반 연관 : 한 클래스가 다른 클래스의 참조를 유지하는 것을 뜻한다. (일반 화살표)
aggregation : 배열 리스트나 연결 리스트처럼 생성 이후에도 데이터가 쌓일 수 있는 관계를 뜻한다. (화살표와 흰색 마름모) (집합 연관) (A has B)
composition : aggregation보다 강한 결합성을 가지며 객체의 라이프 사이클까지 동일함을 뜻한다. (화살표와 검은 마름모) (복합 연관) (A owns B)

===================
전략 패턴
===================

**전략 패턴** 이란 클래스의 여러가지 동작을 표현하기 위해 다양한 종류의 클래스를 상속하지 않고 전략 인터페이스에만 의존하여 전략을 선택할 수 있는 디자인 기법이다. 알고리즘을 독립시키는 패턴을 뜻한다.

**전략 패턴의 특징은 코드의 중복없이 알고리즘을 재사용할 수 있다는 것이다.**

===================
위임 패턴
===================

다른 객체에 일을 위임하는 설계 패턴을 뜻한다. 안드로이드에서 터치이벤트를 처리하기 위해 버튼의 구체적인 역할을 OnClickListener에 위임하였다.

=======================
팩토리 메서드 패턴
=======================

`팩토리 메서드 패턴 <http://www.oodesign.com/factory-method-pattern.html>`_

객체를 사용하는 측에서 사용하려는 클래스의 인터페이스만 정의하며 실제로 어떤 객체를 생성할지 구체적인 팩토리 메서드에 맡기는 패턴이다. 예를들어 워드에서 특별한 형식의 문서를 만들때 그 타입만 넘겨주면 타입에 관련된 구체적인 클래스를 반환한다.

장점

- 단지 인터페이스만 알고 있으면 되기 때문에 클래스와의 강결합을 줄여준다. 어플리케이션과 구체적인 클래스를 분리시킨다. 따라서 코드 수정이 적다.
- 팩토리 메서드를 사용하여 내부적으로 수정이 쉬우므로 객체 생성의 다양성을 제공한다.

단점 (사용하기 안좋은 경우)

- 생성하려는 클래스의 종류가 부모를 상속하는 형태가 아니라면 굳이 쓸필요가 없는 패턴이다.
- 확장이 아닌 결합도를 줄이기 위해 사용하는 패턴이다.

=======================
템플릿 메서드 패턴
=======================

부모 클래스에서 메서드 호출의 흐름을 제어하고 자식 클래스에서 구체적인 내용을 작성하는 패턴이다. 예를들어 HTML문서를 생성할때 템플릿 메서드를 활용하면 좋다. 템플릿 메서드에서 head, body 등의 필요한 태그를 생성하는 함수를 이용해 흐름을 작성한다.

장점

- 템플릿을 통해 코드의 중복을 줄인다.
- 템플릿 메서드를 이용해 리팩토링이 쉽다.

===================
옵저버 패턴
===================

다른 객체의 변화를 관찰하는 패턴이다. 콜백패턴이라고 불리기도 한다.

장점

- 객체의 변화를 감지할 수 있다.




