.. _design_pattern:

**************************
용어
**************************

.. _design_terms_디자인_패턴:

=============
 디자인 패턴
=============

디자인 패턴이란 개발 시 자주 사용하는 설계 노하우나 코딩 테크닉을 뜻한다.

=====================
 객체지향 프로그래밍
=====================

프로그램에서 다뤄야할 대상을 객체로 추상화하여 프로그래밍 하는 프로그래밍 패러다임을 뜻한다.

========================
 캡슐화 (Encapsulation)
========================

캡슐화란 필드와 메서드를 묶고 그것을 외부의 잘못된 접근으로 숨기고 보호하는 개념을 뜻한다.

========================================================================
 높은 수준의 정책(high-level policy)과 낮은 수준의 구현(low-level implementation)
========================================================================

정책이란 API나 인터페이스를 뜻한다. 높은 수준의 정책이란 도메인에 더 가까우며 잘 변하지 않으며 API나 인터페이스를 의미한다. 낮은 수준의 구현은 다른 모듈에 의해 특히, 높은 수준의 정책에 의해 사용되는 인터페이스를 뜻한다.

=============================================
책임 주도 설계 (Responsibility-driven design)
=============================================

각 객체의 행동을 분석하여 이를 클라이언트-서버의 계약으로 접근하여 객체를 추상화하는 설계 테크닉이다.

=======================================
도메인 주도 설계 (Domain-driven design)
=======================================

프로그램이 필요한 분야에서 다뤄야 할 대상, 활동을 중심으로 프로그래밍 설계하는 방법이다. OOP와 유사하다.

==================================================================
객체-관계형 임피던스 불일치 (Object-relational impedance mismatch)
==================================================================

객체지향 프로그래밍에서 RDBMS를 사용할 때 마주할 수 있는 기술적 어려움이다. 데이터베이스 테이블을 객체나 클래스로 매핑해야하기 때문에 기술적으로 어려움이 발생할 수 있다. **임피던스 미스매칭** 은 전자공학의 오디오 시스템의 밸런스 유지를 위한 `임피던스 매칭 <http://terms.naver.com/entry.nhn?docId=3340563&cid=40942&categoryId=32827>`_ 로 부터 파생되었다.

=====
 UML
=====


클래스와 클래스간의 관계를 설계하는 언어이다. 화살표의 방향은 한쪽 클래스를 인식하는 방향으로 그어진다.

- \+ : public
- \- : private
- \# : protected
- 상속. 한 클래스가 다른 클래스의 기능을 재사용할 수 있는 것을 뜻한다. (삼각형 화살표)
- 구현. 한 클래스가 인터페이스를 구현했다는 것을 의미한다. (삼각형 점선 화살표)
- 의존. 한 클래스가 다른 클래스의 참조를 갖지만 유지하지 않는 것을 의존관계라 한다. (일반 점선 화살표)
- 일반 연관. 한 클래스가 다른 클래스의 참조를 유지하는 것을 뜻한다. (일반 화살표)
- aggregation. 배열 리스트나 연결 리스트처럼 생성 이후에도 데이터가 쌓일 수 있는 관계를 뜻한다. (일반 화살표와 흰색 마름모) (집합 연관) (A has B)
- composition. aggregation보다 강한 결합성을 가지며 객체의 라이프 사이클까지 동일함을 뜻한다. (일반 화살표와 검은 마름모) (복합 연관) (A owns B)

===========
 Reference
===========

- **객체지향 프로그래밍.**: https://en.wikipedia.org/wiki/Object-oriented_programming
- **객임주도설계.**: https://en.wikipedia.org/wiki/Responsibility-driven_design
- **DDD.**: http://www.moreagile.net/2014/12/1.html
